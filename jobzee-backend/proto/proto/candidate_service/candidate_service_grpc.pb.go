// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpc/candidate_service.proto

package candidate_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CandidateService_CreateCandidate_FullMethodName   = "/jobzee.candidate_service.CandidateService/CreateCandidate"
	CandidateService_GetCandidate_FullMethodName      = "/jobzee.candidate_service.CandidateService/GetCandidate"
	CandidateService_ListCandidates_FullMethodName    = "/jobzee.candidate_service.CandidateService/ListCandidates"
	CandidateService_UpdateCandidate_FullMethodName   = "/jobzee.candidate_service.CandidateService/UpdateCandidate"
	CandidateService_DeleteCandidate_FullMethodName   = "/jobzee.candidate_service.CandidateService/DeleteCandidate"
	CandidateService_SearchCandidates_FullMethodName  = "/jobzee.candidate_service.CandidateService/SearchCandidates"
	CandidateService_GetCandidateStats_FullMethodName = "/jobzee.candidate_service.CandidateService/GetCandidateStats"
)

// CandidateServiceClient is the client API for CandidateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Candidate Service definition
type CandidateServiceClient interface {
	// Create a new candidate
	CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*Candidate, error)
	// Get a candidate by ID
	GetCandidate(ctx context.Context, in *GetCandidateRequest, opts ...grpc.CallOption) (*Candidate, error)
	// List candidates with optional filtering
	ListCandidates(ctx context.Context, in *ListCandidatesRequest, opts ...grpc.CallOption) (*ListCandidatesResponse, error)
	// Update an existing candidate
	UpdateCandidate(ctx context.Context, in *UpdateCandidateRequest, opts ...grpc.CallOption) (*Candidate, error)
	// Delete a candidate
	DeleteCandidate(ctx context.Context, in *DeleteCandidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Search candidates by criteria
	SearchCandidates(ctx context.Context, in *SearchCandidatesRequest, opts ...grpc.CallOption) (*SearchCandidatesResponse, error)
	// Get candidate statistics
	GetCandidateStats(ctx context.Context, in *GetCandidateStatsRequest, opts ...grpc.CallOption) (*CandidateStats, error)
}

type candidateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandidateServiceClient(cc grpc.ClientConnInterface) CandidateServiceClient {
	return &candidateServiceClient{cc}
}

func (c *candidateServiceClient) CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*Candidate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Candidate)
	err := c.cc.Invoke(ctx, CandidateService_CreateCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateServiceClient) GetCandidate(ctx context.Context, in *GetCandidateRequest, opts ...grpc.CallOption) (*Candidate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Candidate)
	err := c.cc.Invoke(ctx, CandidateService_GetCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateServiceClient) ListCandidates(ctx context.Context, in *ListCandidatesRequest, opts ...grpc.CallOption) (*ListCandidatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCandidatesResponse)
	err := c.cc.Invoke(ctx, CandidateService_ListCandidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateServiceClient) UpdateCandidate(ctx context.Context, in *UpdateCandidateRequest, opts ...grpc.CallOption) (*Candidate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Candidate)
	err := c.cc.Invoke(ctx, CandidateService_UpdateCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateServiceClient) DeleteCandidate(ctx context.Context, in *DeleteCandidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CandidateService_DeleteCandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateServiceClient) SearchCandidates(ctx context.Context, in *SearchCandidatesRequest, opts ...grpc.CallOption) (*SearchCandidatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCandidatesResponse)
	err := c.cc.Invoke(ctx, CandidateService_SearchCandidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *candidateServiceClient) GetCandidateStats(ctx context.Context, in *GetCandidateStatsRequest, opts ...grpc.CallOption) (*CandidateStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CandidateStats)
	err := c.cc.Invoke(ctx, CandidateService_GetCandidateStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CandidateServiceServer is the server API for CandidateService service.
// All implementations must embed UnimplementedCandidateServiceServer
// for forward compatibility.
//
// Candidate Service definition
type CandidateServiceServer interface {
	// Create a new candidate
	CreateCandidate(context.Context, *CreateCandidateRequest) (*Candidate, error)
	// Get a candidate by ID
	GetCandidate(context.Context, *GetCandidateRequest) (*Candidate, error)
	// List candidates with optional filtering
	ListCandidates(context.Context, *ListCandidatesRequest) (*ListCandidatesResponse, error)
	// Update an existing candidate
	UpdateCandidate(context.Context, *UpdateCandidateRequest) (*Candidate, error)
	// Delete a candidate
	DeleteCandidate(context.Context, *DeleteCandidateRequest) (*emptypb.Empty, error)
	// Search candidates by criteria
	SearchCandidates(context.Context, *SearchCandidatesRequest) (*SearchCandidatesResponse, error)
	// Get candidate statistics
	GetCandidateStats(context.Context, *GetCandidateStatsRequest) (*CandidateStats, error)
	mustEmbedUnimplementedCandidateServiceServer()
}

// UnimplementedCandidateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCandidateServiceServer struct{}

func (UnimplementedCandidateServiceServer) CreateCandidate(context.Context, *CreateCandidateRequest) (*Candidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCandidate not implemented")
}
func (UnimplementedCandidateServiceServer) GetCandidate(context.Context, *GetCandidateRequest) (*Candidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidate not implemented")
}
func (UnimplementedCandidateServiceServer) ListCandidates(context.Context, *ListCandidatesRequest) (*ListCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandidates not implemented")
}
func (UnimplementedCandidateServiceServer) UpdateCandidate(context.Context, *UpdateCandidateRequest) (*Candidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCandidate not implemented")
}
func (UnimplementedCandidateServiceServer) DeleteCandidate(context.Context, *DeleteCandidateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCandidate not implemented")
}
func (UnimplementedCandidateServiceServer) SearchCandidates(context.Context, *SearchCandidatesRequest) (*SearchCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCandidates not implemented")
}
func (UnimplementedCandidateServiceServer) GetCandidateStats(context.Context, *GetCandidateStatsRequest) (*CandidateStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidateStats not implemented")
}
func (UnimplementedCandidateServiceServer) mustEmbedUnimplementedCandidateServiceServer() {}
func (UnimplementedCandidateServiceServer) testEmbeddedByValue()                          {}

// UnsafeCandidateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandidateServiceServer will
// result in compilation errors.
type UnsafeCandidateServiceServer interface {
	mustEmbedUnimplementedCandidateServiceServer()
}

func RegisterCandidateServiceServer(s grpc.ServiceRegistrar, srv CandidateServiceServer) {
	// If the following call pancis, it indicates UnimplementedCandidateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CandidateService_ServiceDesc, srv)
}

func _CandidateService_CreateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).CreateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_CreateCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).CreateCandidate(ctx, req.(*CreateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateService_GetCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).GetCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_GetCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).GetCandidate(ctx, req.(*GetCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateService_ListCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).ListCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_ListCandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).ListCandidates(ctx, req.(*ListCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateService_UpdateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).UpdateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_UpdateCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).UpdateCandidate(ctx, req.(*UpdateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateService_DeleteCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).DeleteCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_DeleteCandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).DeleteCandidate(ctx, req.(*DeleteCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateService_SearchCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).SearchCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_SearchCandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).SearchCandidates(ctx, req.(*SearchCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CandidateService_GetCandidateStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandidateStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CandidateServiceServer).GetCandidateStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CandidateService_GetCandidateStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CandidateServiceServer).GetCandidateStats(ctx, req.(*GetCandidateStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CandidateService_ServiceDesc is the grpc.ServiceDesc for CandidateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandidateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobzee.candidate_service.CandidateService",
	HandlerType: (*CandidateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCandidate",
			Handler:    _CandidateService_CreateCandidate_Handler,
		},
		{
			MethodName: "GetCandidate",
			Handler:    _CandidateService_GetCandidate_Handler,
		},
		{
			MethodName: "ListCandidates",
			Handler:    _CandidateService_ListCandidates_Handler,
		},
		{
			MethodName: "UpdateCandidate",
			Handler:    _CandidateService_UpdateCandidate_Handler,
		},
		{
			MethodName: "DeleteCandidate",
			Handler:    _CandidateService_DeleteCandidate_Handler,
		},
		{
			MethodName: "SearchCandidates",
			Handler:    _CandidateService_SearchCandidates_Handler,
		},
		{
			MethodName: "GetCandidateStats",
			Handler:    _CandidateService_GetCandidateStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/candidate_service.proto",
}
