version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: jobzee-postgres
    environment:
      POSTGRES_DB: jobzee
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: jobzee-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: jobzee-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: jobzee-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - ./data/kafka:/var/lib/kafka/data
    networks:
      - jobzee-network
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: jobzee-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: jobzee-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  api-service:
    build:
      context: ./multi-agent-backend
      dockerfile: Dockerfile
      target: api
    container_name: jobzee-api
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=jobzee
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - JWT_EXPIRATION=24
      - BCRYPT_COST=12
      - REFRESH_TOKEN_EXP=7
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  job-service:
    build:
      context: ./multi-agent-backend
      dockerfile: Dockerfile
      target: jobservice
    container_name: jobzee-job-service
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=jobzee
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  candidate-service:
    build:
      context: ./multi-agent-backend
      dockerfile: Dockerfile
      target: candidateservice
    container_name: jobzee-candidate-service
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=jobzee
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-service:
    build:
      context: ./multi-agent-backend
      dockerfile: Dockerfile
      target: agentservice
    container_name: jobzee-agent-service
    ports:
      - "8083:8083"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=jobzee
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./multi-agent-frontend
      dockerfile: Dockerfile
    container_name: jobzee-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
      - NEXT_PUBLIC_APP_NAME=JobZee
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    depends_on:
      api-service:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Services
  job-finder-agent:
    build:
      context: ./multi-agent-agents
      dockerfile: Dockerfile
      target: job-finder
    container_name: jobzee-job-finder-agent
    ports:
      - "8084:8084"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - VECTOR_DB_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENT_PORT=8084
      - AGENT_TYPE=job-finder
      - AGENT_HTTP_PORT=8084
      - AGENT_HTTP_HOST=0.0.0.0
    depends_on:
      kafka:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["python", "job_finder_agent/http_server.py"]

  candidate-finder-agent:
    build:
      context: ./multi-agent-agents
      dockerfile: Dockerfile
      target: candidate-finder
    container_name: jobzee-candidate-finder-agent
    ports:
      - "8085:8085"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - VECTOR_DB_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENT_PORT=8085
      - AGENT_TYPE=candidate-finder
      - AGENT_HTTP_PORT=8085
      - AGENT_HTTP_HOST=0.0.0.0
    depends_on:
      kafka:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["python", "candidate_finder_agent/http_server.py"]

  # MCP Tools Service
  mcp-tools:
    build:
      context: ./multi-agent-agents
      dockerfile: Dockerfile
      target: mcp-tools
    container_name: jobzee-mcp-tools
    ports:
      - "8086:8086"
    environment:
      - MCP_PORT=8086
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - EMAIL_SERVICE_API_KEY=${EMAIL_SERVICE_API_KEY}
      - CALENDAR_SERVICE_API_KEY=${CALENDAR_SERVICE_API_KEY}
    networks:
      - jobzee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: jobzee-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - jobzee-network

  grafana:
    image: grafana/grafana:latest
    container_name: jobzee-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - jobzee-network

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: jobzee-adminer
    ports:
      - "8087:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - jobzee-network

networks:
  jobzee-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  minio_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
